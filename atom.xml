<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>多媒体通信研发</title>
  <subtitle>记录点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://firstspark.github.io/"/>
  <updated>2016-09-12T08:44:16.028Z</updated>
  <id>http://firstspark.github.io/</id>
  
  <author>
    <name>VVSIP</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SIP协议响应代码</title>
    <link href="http://firstspark.github.io/2016/09/12/sip-call-code/"/>
    <id>http://firstspark.github.io/2016/09/12/sip-call-code/</id>
    <published>2016-09-12T01:17:36.000Z</published>
    <updated>2016-09-12T08:44:16.028Z</updated>
    
    <content type="html"><![CDATA[<p>  SIP响应是由一个用户代理服务器(UAS)或SIP服务器生成回复由客户端生成的请求的消息。它可能是一个正式的确认，以防止请求由UAC重发。</p>
<ul>
<li><p>响应可能包含需要一个UAC信息一些额外的头字段</p>
</li>
<li><p>SIP有六个响应</p>
</li>
<li><p>1xx - 5xx已经借由HTTP，而6xx系列在SIP介绍。</p>
</li>
<li><p>1XX被认为是一个临时响应，其余的最终响应。</p>
<p>类 别  |     描述 |动作<br>—–|——–|—-<br>1xx  |    信息     |这表明调用之前完成也被称为临时响应的状态。<br>2xx&nbsp;&nbsp;&nbsp;  |成功     |请求已成功。如果这是一个邀请，确认应发送;否则，停止请求的重发。<br>3xx  |重定向     |服务器返回的可能位置。客户端应该重试另一个服务器的请求。<br>4xx     |客户端错误     |请求已经由客户端失败，原因是一个错误。客户端可以重试请求，如果它是根据响应拟订。<br>5xx     |服务器故障     |请求已经由该服务器失败，原因是一个错误。请求可以在另一台服务器退出。<br>6xx      |全局失败     |请求已失败。该请求不应该在这个或其他服务器再次尝试。</p>
</li>
</ul>
<h2 id="信息-1xx"><a href="#信息-1xx" class="headerlink" title="信息(1xx)"></a>信息(1xx)</h2><p>信息(1xx)响应用于指示呼叫过程。通常情况下，响应是端对端（除100尝试）。信息(1xx)的响应的主要目的是阻止INVITE请求的重发。</p>
<p>信息响应包括以下响应：</p>
<h3 id="100-Trying-尝试"><a href="#100-Trying-尝试" class="headerlink" title="100 Trying (尝试)"></a>100 Trying (尝试)</h3><ul>
<li><p>这种特殊的情况下的响应仅仅是一个逐跳请求。</p>
</li>
<li><p>它永远不会转发，不得包含消息体。</p>
</li>
<li><p>它被用于避免INVITE请求的重传。</p>
</li>
</ul>
<h3 id="180-Ringing-响铃"><a href="#180-Ringing-响铃" class="headerlink" title="180  Ringing (响铃)"></a>180  Ringing (响铃)</h3><ul>
<li>此响应被用来指示用户代理已经接收到INVITE消息，并且正在电话振铃。</li>
</ul>
<h3 id="181-Call-is-Being-Forwarded-呼叫被转发"><a href="#181-Call-is-Being-Forwarded-呼叫被转发" class="headerlink" title="181 Call is Being Forwarded (呼叫被转发)"></a>181 Call is Being Forwarded (呼叫被转发)</h3><ul>
<li><p>此响应用于指示该呼叫已被转发到另一端。</p>
</li>
<li><p>当主叫需要此响应消息时才被发送。</p>
</li>
<li><p>此响应告诉主叫，由于转发操作会导致应答时间变长。</p>
</li>
</ul>
<h3 id="182-Call-Queued-呼叫队列"><a href="#182-Call-Queued-呼叫队列" class="headerlink" title="182 Call Queued (呼叫队列)"></a>182 Call Queued (呼叫队列)</h3><ul>
<li>此响应被用来指示该INVITE消息已经接收到，并且将在队列进行处理。</li>
</ul>
<h3 id="183-Session-Progress-会话进度"><a href="#183-Session-Progress-会话进度" class="headerlink" title="183 Session Progress (会话进度)"></a>183 Session Progress (会话进度)</h3><ul>
<li><p>它指示本次会话的进度信息可以存在于消息主体或媒体流中。</p>
</li>
<li><p>不像100 Trying的尝试响应，183是端对端的响应，并且会实际性的建立起一个对话。</p>
</li>
<li><p>一个典型的应用环境是让UAC通过落地网关进入PSTN网络，并让主叫听到手机铃声，或忙音，或通话录音的通知音。（此消息也是电话铃音透传的关键）</p>
</li>
</ul>
<h2 id="成功-2xx"><a href="#成功-2xx" class="headerlink" title="成功(2xx)"></a>成功(2xx)</h2><p>此类响应是用于指示一个请求已被接受。它包括以下响应：</p>
<h3 id="200-OK"><a href="#200-OK" class="headerlink" title="200 OK"></a>200 OK</h3><ul>
<li>200 OK用于接受会话邀请。</li>
<li>它表示成功完成的请求或接受请求。</li>
</ul>
<h3 id="202-Accepted-接受"><a href="#202-Accepted-接受" class="headerlink" title="202 Accepted (接受)"></a>202 Accepted (接受)</h3><ul>
<li><p>表示该UAS已经接收并理解了请求，但该请求可能没有被授权或正在由服务器处理。</p>
</li>
<li><p>它是常用来响应SUBSCRIBE消息，REFER消息。</p>
</li>
</ul>
<h2 id="重定向-3xx"><a href="#重定向-3xx" class="headerlink" title="重定向(3xx)"></a>重定向(3xx)</h2><p>通常这类响应是由重定向服务器发送，来响应INVITE消息的。它们也被称为重定向类响应。它包括以下响应：</p>
<h3 id="300-Multiple-Choices-多重选择"><a href="#300-Multiple-Choices-多重选择" class="headerlink" title="300 Multiple Choices (多重选择)"></a>300 Multiple Choices (多重选择)</h3><ul>
<li>它包含多个联系人的报头字段，说明该位置服务器返回多个可能的位置，并在Request-URI中用多个SIP URI表示。</li>
</ul>
<h3 id="301-Moved-Permanently-永久移动"><a href="#301-Moved-Permanently-永久移动" class="headerlink" title="301 Moved Permanently (永久移动)"></a>301 Moved Permanently (永久移动)</h3><ul>
<li><p>这种重定向响应在Contact头字段中包含着被叫方的新的永久性的URI。</p>
</li>
<li><p>位置地址可以被保存，并在以后的INVITE请求中使用。</p>
</li>
</ul>
<h3 id="302-Moved-Temporarily-临时移动"><a href="#302-Moved-Temporarily-临时移动" class="headerlink" title="302 Moved Temporarily (临时移动)"></a>302 Moved Temporarily (临时移动)</h3><ul>
<li><p>该响应包含一个URI，该URI是当前有效的，但不是永久的。</p>
</li>
<li><p>也就是该URI位置地址在指定的特殊时间内是有效的 。</p>
</li>
</ul>
<h3 id="305-Use-Proxy-使用代理"><a href="#305-Use-Proxy-使用代理" class="headerlink" title="305 Use Proxy (使用代理)"></a>305 Use Proxy (使用代理)</h3><ul>
<li><p>这个响应包含一个URI，该URI指向具有对呼叫方有认证信息的代理服务器。</p>
</li>
<li><p>这种响应可以由发出来电的UAS代理服务器发送。</p>
</li>
</ul>
<h3 id="380-Alternative-Service-可替代服务"><a href="#380-Alternative-Service-可替代服务" class="headerlink" title="380 Alternative Service (可替代服务)"></a>380 Alternative Service (可替代服务)</h3><ul>
<li><p>这个响应返回一个URI，该URI指示被叫方希望的服务类型。</p>
</li>
<li><p>例如，一个通话可以被重新定向到一个语音信箱的服务。</p>
</li>
</ul>
<h2 id="客户端错误-4xx"><a href="#客户端错误-4xx" class="headerlink" title="客户端错误(4xx)"></a>客户端错误(4xx)</h2><p>客户端错误的响应表明，由于UAC端的一些错误使得请求不能得到满足。响应代码通常由UAS来发送。客户端在接收到出错消息时，应该基于该响应的描述进行修改并重新发送。下面讨论的是一些重要的客户端错误的响应。</p>
<h3 id="400-Bad-Request-错误的请求"><a href="#400-Bad-Request-错误的请求" class="headerlink" title="400 Bad Request (错误的请求)"></a>400 Bad Request (错误的请求)</h3><ul>
<li><p>这表明该请求不被服务器理解。</p>
</li>
<li><p>请求可能是缺少必要的头字段，例如To, From, Call-ID, 或 CSeq。</p>
</li>
</ul>
<h3 id="401-Unauthorized-未经授权"><a href="#401-Unauthorized-未经授权" class="headerlink" title="401 Unauthorized (未经授权)"></a>401 Unauthorized (未经授权)</h3><ul>
<li><p>说明该请求要求用户进行认证。</p>
</li>
<li><p>401 Unauthorized 通常回应的是注册请求，由代理服务器发送。</p>
</li>
<li><p>该响应包含WWW-Authenticate身份验证头字段，该字段表明从主叫那里获得正确的凭据请求。</p>
</li>
<li><p>随后，REGISTER将重发，并包含着用户的正确的凭据。</p>
</li>
</ul>
<p><img src="http://img.blog.csdn.net/20160912164342978" alt="401_unauthorized.jpg"></p>
<h3 id="403-Forbidden-禁止"><a href="#403-Forbidden-禁止" class="headerlink" title="403 Forbidden (禁止)"></a>403 Forbidden (禁止)</h3><ul>
<li><p>403 Forbidden 说明代理服务器已经理解请求，并正确匹配请求，但不能提供该请求的服务。</p>
</li>
<li><p>这种响应在需要授权时不能使用。</p>
</li>
</ul>
<h3 id="404-Not-Found-未找到"><a href="#404-Not-Found-未找到" class="headerlink" title="404 Not Found (未找到)"></a>404 Not Found (未找到)</h3><ul>
<li>404 Not Found表明在服务器中没有找到该请求URI标识中的SIP URI用户。</li>
</ul>
<h3 id="405-Method-Not-Allowed-不允许的方法"><a href="#405-Method-Not-Allowed-不允许的方法" class="headerlink" title="405 Method Not Allowed (不允许的方法)"></a>405 Method Not Allowed (不允许的方法)</h3><ul>
<li><p>说明服务器或用户代理已收到并理解该请求，但不能执行该请求。</p>
</li>
<li><p>例如：当注册请求被发送到用户代理端时，用户代理可响应405。</p>
</li>
<li><p>在消息头中，Allow 域是必需的，它告诉UAC什么方法是可以接受的。</p>
</li>
</ul>
<h3 id="406-Not-Acceptable-不接受"><a href="#406-Not-Acceptable-不接受" class="headerlink" title="406 Not Acceptable (不接受)"></a>406 Not Acceptable (不接受)</h3><ul>
<li><p>该响应说明不能按照该请求消息中的规定来处理。</p>
</li>
<li><p>在请求中的Accept头域中没有包含UAS支持的任何选项。</p>
</li>
</ul>
<h3 id="407-Proxy-Authentication-Required-需要代理身份验证"><a href="#407-Proxy-Authentication-Required-需要代理身份验证" class="headerlink" title="407 Proxy Authentication Required (需要代理身份验证)"></a>407 Proxy Authentication Required (需要代理身份验证)</h3><ul>
<li><p>由代理服务器发送该请求说明UAC必须首先验证自身的请求后才可以被处理。</p>
</li>
<li><p>响应消息的Proxy-Authenticate头字段中应包含所需凭据的类型信息。</p>
</li>
<li><p>该请求可以被重新提交，并在Proxy-Authenticate头字段中包含正确的凭据。</p>
</li>
</ul>
<h3 id="408-Request-Timeout-请求超时"><a href="#408-Request-Timeout-请求超时" class="headerlink" title="408 Request Timeout (请求超时)"></a>408 Request Timeout (请求超时)</h3><ul>
<li><p>当响应时间超过INVITE请求的Expires头域字段中指定的时间段时，该响应被发送。</p>
</li>
<li><p>它可以由代理服务器或用户代理发送。</p>
</li>
<li><p>该请求可以在任何时候由UAC重试。</p>
</li>
</ul>
<h3 id="422-Session-Timer-Interval-Too-Small-会话定时器间隔太小"><a href="#422-Session-Timer-Interval-Too-Small-会话定时器间隔太小" class="headerlink" title="422 Session Timer Interval Too Small (会话定时器间隔太小)"></a>422 Session Timer Interval Too Small (会话定时器间隔太小)</h3><ul>
<li><p>该响应被用来处理拒绝含有Session-Expires头字段的请求。</p>
</li>
<li><p>允许的最小间隔被表示在所请求的Min-SE头字段中。</p>
</li>
<li><p>主叫方可以重新尝试，当没有会话Expires头字段或间隔时间值大于或等于规定的最小值时。</p>
</li>
</ul>
<h3 id="423-Interval-Too-Brief-间隔太短"><a href="#423-Interval-Too-Brief-间隔太短" class="headerlink" title="423 Interval Too Brief (间隔太短)"></a>423 Interval Too Brief (间隔太短)</h3><ul>
<li><p>该响应说明在请求中设置的资源刷新时间(或者有效时间)过短，可以用于代理服务器来拒绝那些Contact头域有效期过短的注册请求。</p>
</li>
<li><p>该响应必须包含Min-Expires头域并指出最小有效期，该注册者应该接受并修改。</p>
</li>
</ul>
<h3 id="480-Temporarily-Unavailable-暂时不可用"><a href="#480-Temporarily-Unavailable-暂时不可用" class="headerlink" title="480 Temporarily Unavailable (暂时不可用)"></a>480 Temporarily Unavailable (暂时不可用)</h3><ul>
<li><p>该响应说明请求已正确到达被叫方，但因被叫方有一些暂时不可用的原因而拒绝。</p>
</li>
<li><p>该响应应包含一个Retry-After头，表明何时请求可以得到满足。</p>
</li>
</ul>
<h3 id="481-Dialog-Transaction-Does-Not-Exist-对话-事务不存在"><a href="#481-Dialog-Transaction-Does-Not-Exist-对话-事务不存在" class="headerlink" title="481 Dialog/Transaction Does Not Exist (对话/事务不存在)"></a>481 Dialog/Transaction Does Not Exist (对话/事务不存在)</h3><ul>
<li>该响应说明UAS接收到请求，但是没有和现存的对话或者事务匹配。</li>
</ul>
<h3 id="483-Too-Many-Hops-太多的跳数"><a href="#483-Too-Many-Hops-太多的跳数" class="headerlink" title="483 Too Many Hops (太多的跳数)"></a>483 Too Many Hops (太多的跳数)</h3><ul>
<li><p>此响应说明请求已被转发的次数已达到上限，该判断由请求的Max-Forwards头来设置。</p>
</li>
<li><p>请求中Max-Forward：0，即数值为0来表示达到最大转发。</p>
</li>
</ul>
<h3 id="486-Busy-Here-忙，占线"><a href="#486-Busy-Here-忙，占线" class="headerlink" title="486 Busy Here (忙，占线)"></a>486 Busy Here (忙，占线)</h3><ul>
<li>该响应说明用户代理正在忙，不能接受呼叫。</li>
</ul>
<h3 id="487-Request-Terminated-请求终止"><a href="#487-Request-Terminated-请求终止" class="headerlink" title="487 Request Terminated (请求终止)"></a>487 Request Terminated (请求终止)</h3><ul>
<li><p>该响应会被发送，当用户CANCEL来结束INVITE请求时。</p>
</li>
<li><p>200 OK消息用来确认CANCEL消息，用487 Request Terminated来取消INVITE请求。</p>
</li>
</ul>
<h2 id="服务器故障-5xx"><a href="#服务器故障-5xx" class="headerlink" title="服务器故障 (5xx)"></a>服务器故障 (5xx)</h2><p>此类响应说明因服务器中的错误而不能处理发来的请求。显然对有效的请求服务器也无法完成。此类响应可包含一个Retry-After头字段，用来表明可以在其它地址进行重试，因为没有在请求中表明请求的错误，所以智能采用重试方法。一些重要的服务器故障响应如下。</p>
<h3 id="500-Server-Internal-Error-服务器内部错误"><a href="#500-Server-Internal-Error-服务器内部错误" class="headerlink" title="500 Server Internal Error (服务器内部错误)"></a>500 Server Internal Error (服务器内部错误)</h3><ul>
<li><p>500表示服务器发生了某种错误，从而不能处理请求。</p>
</li>
<li><p>它是一种服务器故障，指示客户端过一段时间后可以再次重试请求。</p>
</li>
</ul>
<h3 id="501-Not-Implemented-未实现"><a href="#501-Not-Implemented-未实现" class="headerlink" title="501 Not Implemented (未实现)"></a>501 Not Implemented (未实现)</h3><ul>
<li><p>它表明服务器无法执行，因为它不支持处理该请求。</p>
</li>
<li><p>该响应被用来拒绝含有未知方法的请求。</p>
</li>
</ul>
<h3 id="502-Bad-Gateway-错误的网关"><a href="#502-Bad-Gateway-错误的网关" class="headerlink" title="502 Bad Gateway (错误的网关)"></a>502 Bad Gateway (错误的网关)</h3><ul>
<li><p>如果服务器作为网关或者代理存在，从下行服务器上接收到了一个非法的应答（这个应答对应的请求是本服务器为了完成请求而转发给下行服务器的）</p>
</li>
<li><p>这表明有其他的一些网络问题使请求不能被处理。</p>
</li>
</ul>
<h3 id="503-Service-Unavailable-暂停服务"><a href="#503-Service-Unavailable-暂停服务" class="headerlink" title="503 Service Unavailable (暂停服务)"></a>503 Service Unavailable (暂停服务)</h3><ul>
<li><p>该响应说明所请求的服务是暂时不可用。</p>
</li>
<li><p>服务器可以在应答中增加一个Retry-After来让客户端重试这个请求。客户端在Retry-After头字段期满之后才能进行重试。</p>
</li>
</ul>
<h3 id="504-Gateway-Timeout-网关超时"><a href="#504-Gateway-Timeout-网关超时" class="headerlink" title="504 Gateway Timeout (网关超时)"></a>504 Gateway Timeout (网关超时)</h3><ul>
<li><p>该响应说明服务器在一个外部服务器上没有收到一个及时的应答。这个外部服务器是本服务器用来访问处理这个请求所需要的。如果从上行服务器上收到的请求中的Expires头域超时，那么应当返回一个408（Request TimeOut）错误。</p>
</li>
<li><p>它是一个服务器错误类响应，是因为服务器访问SIP网络以外的资源未能得到响应引起的。</p>
</li>
</ul>
<h3 id="505-Version-Not-Supported-版本不支持"><a href="#505-Version-Not-Supported-版本不支持" class="headerlink" title="505 Version Not Supported (版本不支持)"></a>505 Version Not Supported (版本不支持)</h3><ul>
<li><p>该响应说明服务器不支持对应的SIP版本。</p>
</li>
<li><p>目前SIP2.0版是唯一的实现版本。</p>
</li>
</ul>
<h3 id="513-Message-Too-Large-消息过大"><a href="#513-Message-Too-Large-消息过大" class="headerlink" title="513  Message Too Large (消息过大)"></a>513  Message Too Large (消息过大)</h3><ul>
<li>此响应说明无法处理请求，因为消息长度超过了处理的长度。</li>
</ul>
<h3 id="580-Preconditions-Failure-前提条件失败"><a href="#580-Preconditions-Failure-前提条件失败" class="headerlink" title="580 Preconditions Failure (前提条件失败)"></a>580 Preconditions Failure (前提条件失败)</h3><ul>
<li>此响应说明SDP中需要的前提条件不能得到满足而拒绝请求。</li>
</ul>
<h2 id="全局错误-6xx"><a href="#全局错误-6xx" class="headerlink" title="全局错误 (6xx)"></a>全局错误 (6xx)</h2><p>此响应类表示服务器知道该请求无论怎样尝试都将会失败，所以，该请求不应该被发送到其他地方。</p>
<p>这意味这服务器给特定用户有一个最终的信息，并不只是在Request-URI的特定实例有最终信息。 一些重要的响应的如下：</p>
<h3 id="600-Busy-Everywhere-任意占线"><a href="#600-Busy-Everywhere-任意占线" class="headerlink" title="600 Busy Everywhere (任意占线)"></a>600 Busy Everywhere (任意占线)</h3><ul>
<li>只有当终端系统知道没有其他终端节点（比如语音邮箱系统）能 够访问到这个用户的时候才能使用这个应答。否则应当返回一个486（Busy Here）的应答。</li>
</ul>
<h3 id="603-Decline-拒绝"><a href="#603-Decline-拒绝" class="headerlink" title="603 Decline (拒绝)"></a>603 Decline (拒绝)</h3><ul>
<li>该响应表明被叫方占线，或者干脆不希望接通呼叫。</li>
</ul>
<h3 id="604-Does-Not-Exist-Anywhere-不存在任何地方"><a href="#604-Does-Not-Exist-Anywhere-不存在任何地方" class="headerlink" title="604 Does Not Exist Anywhere (不存在任何地方)"></a>604 Does Not Exist Anywhere (不存在任何地方)</h3><ul>
<li><p>该响应类似于404未找到的响应，但表示在Request-URI中的用户不能在任何地方找到。</p>
</li>
<li><p>该反应应该仅由具有访问所有相关用户信息的服务器发送。</p>
</li>
</ul>
<h3 id="606-Not-Acceptable-不接受"><a href="#606-Not-Acceptable-不接受" class="headerlink" title="606 Not Acceptable (不接受)"></a>606 Not Acceptable (不接受)</h3><ul>
<li><p>该响应说明成功联系到一个UA,但是会话描述的一些部分比如请求的媒体，带宽，或者地址类型不被接收。</p>
</li>
<li><p>该响应意味着用户希望通讯，但是不能充分支持会话描述。</p>
</li>
<li><p>可以在Warning头域中包含一个原因列表，用于解释为何会话描述不能被支持。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  SIP响应是由一个用户代理服务器(UAS)或SIP服务器生成回复由客户端生成的请求的消息。它可能是一个正式的确认，以防止请求由UAC重发。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;响应可能包含需要一个UAC信息一些额外的头字段&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SIP有六个响应
    
    </summary>
    
    
      <category term="-SIP -VOIP" scheme="http://firstspark.github.io/tags/SIP-VOIP/"/>
    
  </entry>
  
  <entry>
    <title>SIP协议基本呼叫流程</title>
    <link href="http://firstspark.github.io/2016/09/09/sip-basic-call-flow/"/>
    <id>http://firstspark.github.io/2016/09/09/sip-basic-call-flow/</id>
    <published>2016-09-09T04:47:36.000Z</published>
    <updated>2016-09-09T04:49:56.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SIP呼叫流程"><a href="#SIP呼叫流程" class="headerlink" title="SIP呼叫流程"></a>SIP呼叫流程</h2><p> 下图显示了一个SIP会话的基本呼叫流程。<br><img src="http://img.blog.csdn.net/20160909113447585" alt="SIP Call Flow"></p>
<p>下面是上述呼叫流程的详细解释：</p>
<ul>
<li><p>Alice发送INVITE请求到代理服务器，INVITE请求负责发起会话。</p>
</li>
<li><p>代理服务器立即发送Trying 100给请求者(Alice)，表示试图响应INVITE请求，以防止重传该INVITE请求。</p>
</li>
<li><p>代理服务器搜索Bob所在位置服务器的地址，得到的地址后，将转发INVITE请求到Bob。</p>
</li>
<li><p>此后，Bob回应180 Ringing(临时响应)，并转发180 Ringing(临时响应)给Alice。</p>
</li>
<li><p>Bob接通电话，200 OK响应随即产生，并发送给代理服务器，再由代理服务器转发给Alice。</p>
</li>
<li><p>当Alice端收到200 OK消息后，发送ACK，以确认消息。</p>
</li>
<li><p>至此，RTP媒体流建立完成，Alice和Bob开始对话。</p>
</li>
<li><p>谈话结束后，任何参与者(甲和乙)可以发送一个BYE请求终止会话。</p>
</li>
<li><p>BYE可以绕过代理服务器（或由代理服务器转发），比如从Alice发送给Bob。</p>
</li>
<li><p>Bob接收到BYE消息后，发送200 OK响应，以确认BYE消息，并结束会话。</p>
</li>
<li><p>另外，在上述的基本呼叫流程，有3次握手(标记为1，2，3)。</p>
</li>
</ul>
<p>完整的呼叫(从INVITE到200 OK)被称为一次对话。</p>
<h2 id="SIP跨域呼叫流程"><a href="#SIP跨域呼叫流程" class="headerlink" title="SIP跨域呼叫流程"></a>SIP跨域呼叫流程</h2><p>如何从一个代理服务器的用户呼叫到另一个代理服务器的用户呢？我们可以用下图来解释。<br><img src="http://img.blog.csdn.net/20160909113123991" alt="SIP Trapezoid"></p>
<p>图中示出的拓扑结构称为SIP梯形。该过程发生如下：</p>
<ul>
<li><p>当主叫方发起呼叫，INVITE消息被发送到代理服务器。一旦接收到INVITE时，代理服务器将利用DNS服务器查找该被叫方的地址。</p>
</li>
<li><p>获取到下一跳地址后，主叫方的代理服务器（Proxy1，也称为呼出代理服务器）转发INVITE请求到被叫方的代理服务器（Proxy2，也称为入站代理服务器）。</p>
</li>
<li><p>入站代理服务器接触位置服务器，以获取到被叫方的地址信息。</p>
</li>
<li><p>从位置服务器获得信息后，将转发该呼叫到其目的地，即被叫方。</p>
</li>
<li><p>一旦用户代理知道他们的地址后，他们可以实现直接对话了。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SIP呼叫流程&quot;&gt;&lt;a href=&quot;#SIP呼叫流程&quot; class=&quot;headerlink&quot; title=&quot;SIP呼叫流程&quot;&gt;&lt;/a&gt;SIP呼叫流程&lt;/h2&gt;&lt;p&gt; 下图显示了一个SIP会话的基本呼叫流程。&lt;br&gt;&lt;img src=&quot;http://img.blog
    
    </summary>
    
    
      <category term="-SIP -VOIP" scheme="http://firstspark.github.io/tags/SIP-VOIP/"/>
    
  </entry>
  
  <entry>
    <title>SIP协议网络角色定义</title>
    <link href="http://firstspark.github.io/2016/09/06/sip-network-elements/"/>
    <id>http://firstspark.github.io/2016/09/06/sip-network-elements/</id>
    <published>2016-09-06T14:12:08.000Z</published>
    <updated>2016-09-07T06:22:54.336Z</updated>
    
    <content type="html"><![CDATA[<p>SIP协议定义了一些实体，来帮助创建SIP网络。在SIP网络内每个网络元件被标识SIP URI(统一资源标识符)，它是像一个地址或标识。下面是网络元素：</p>
<ul>
<li>用户代理</li>
<li>代理服务器</li>
<li>注册服务器</li>
<li>重定向服务器</li>
<li>位置服务器</li>
</ul>
<h2 id="用户代理"><a href="#用户代理" class="headerlink" title="用户代理"></a>用户代理</h2><p>它是终端和SIP网络中最重要的网络元件中的一个。终端可以启动，修改或终止会话。用户代理是SIP网络中的智能设备或网络元件。它可能是一个软电话，移动电话或平板电脑。</p>
<p>用户代理在逻辑上分成两部分：</p>
<ul>
<li><p>用户代理客户端（UAC）- 发送请求和接收响应的实体。</p>
</li>
<li><p>用户代理服务器（UAS）- 接收一个请求，并发送应答的实体。</p>
</li>
</ul>
<p>SIP是基于客户端/服务器的架构，其中来电者的电话作为其发起呼叫，被叫方的电话作为其响应的客户端。</p>
<h2 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h2><p>它是从用户代理那里接收一个请求，并将其转发给另一个用户的网络元件。</p>
<ul>
<li><p>简单说，一个代理服务器的作用很像一个路由器。</p>
</li>
<li><p>它可以智能的处理一个SIP请求，并根据URI的发送出去。</p>
</li>
<li><p>代理服务器位于两个用户代理之间。</p>
</li>
<li><p>在源和目的地之间，最大能有70个代理服务器。</p>
</li>
</ul>
<p>有两种类型的代理服务器：</p>
<ul>
<li><p>无状态代理服务器 - 它简单地转发接收到的消息。这种类型的服务器不存储呼叫或事务处理信息。</p>
</li>
<li><p>状态代理服务器- 这种类型的代理服务器会跟踪每个请求和响应的接收，并可以根据需要为将来使用。比如如果终端回应超时，服务器就可以重发请求。</p>
</li>
</ul>
<h2 id="注册服务器"><a href="#注册服务器" class="headerlink" title="注册服务器"></a>注册服务器</h2><p>注册服务器负责接收来自用户代理的注册请求。它可以帮助用户在自己的网络中进行身份验证。它会存储用户的URI和用户的位置，供其他SIP服务器来使用。</p>
<p>看看下面的例子，显示SIP注册的过程。</p>
<p><img src="http://img.blog.csdn.net/20160907112840969" alt=""></p>
<p>在这里，主叫方想要向TMC域名注册。所以它发送一个REGISTER请求到TMC的注册服务器，注册服务器返回200 OK响应，标识注册成功。</p>
<h2 id="重定向服务器"><a href="#重定向服务器" class="headerlink" title="重定向服务器"></a>重定向服务器</h2><p>重定向服务器接收请求，并从注册服务器上寻找请求者的位置信息。</p>
<p>重定向服务器使用获取到位置信息，并响应使用3xx（重定向响应）给用户。我们将在本教程后面讨论响应代码。</p>
<h2 id="位置服务器"><a href="#位置服务器" class="headerlink" title="位置服务器"></a>位置服务器</h2><p>位置服务器提供了对来电者的可能位置的重定向和代理服务器的信息。</p>
<p>只有一个代理服务器或重定向服务器可以连接一个位置服务器。</p>
<p>下图描述了每个网络元素在建立会话所扮演的角色。</p>
<p><img src="http://img.blog.csdn.net/20160907112909072" alt="Location Server"></p>
<h2 id="SIP系统架构"><a href="#SIP系统架构" class="headerlink" title="SIP系统架构"></a>SIP系统架构</h2><p>SIP协议为分层协议，这可以相对独立的处理每层的行为，保证了层次之间的松耦合。</p>
<p><img src="http://img.blog.csdn.net/20160907112924916" alt="System Architecture"></p>
<ul>
<li><p>SIP的最下层是它的语法和编码。它的编码是用扩充Backus-Naur 范式语法（BNF）指定。</p>
</li>
<li><p>第二层是传输层。它定义了一个客户端发送请求和接收响应以及一个服务器如何接收请求和发送响应。所有的SIP网络元素都包含传输层。</p>
</li>
<li><p>第三层是事务层。事务是由客户端（使用传输层）发送到服务器的请求，还包含所有响应服务器给客户端发送的请求。用户代理客户端（UAC）包含一系列事物的处理。无状态代理不包含事务层。</p>
</li>
<li><p>事务层以上的层称为事务用户。每个SIP实体，除了无状态代理，都是一个事务用户。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SIP协议定义了一些实体，来帮助创建SIP网络。在SIP网络内每个网络元件被标识SIP URI(统一资源标识符)，它是像一个地址或标识。下面是网络元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户代理&lt;/li&gt;
&lt;li&gt;代理服务器&lt;/li&gt;
&lt;li&gt;注册服务器&lt;/li&gt;
&lt;li&gt;重定向
    
    </summary>
    
    
      <category term="-SIP -VOIP" scheme="http://firstspark.github.io/tags/SIP-VOIP/"/>
    
  </entry>
  
  <entry>
    <title>SIP协议简介</title>
    <link href="http://firstspark.github.io/2016/09/06/sip-introduction/"/>
    <id>http://firstspark.github.io/2016/09/06/sip-introduction/</id>
    <published>2016-09-06T09:13:53.000Z</published>
    <updated>2016-09-06T10:14:13.958Z</updated>
    
    <content type="html"><![CDATA[<p>会话发起协议（SIP-Session Initiation Protocol ）是在VoIP技术中最常用的协议之一。它是一种应用层协议，它与其它应用层协议一起工作，以通过互联网控制多媒体通信会话。</p>
<h2 id="VoIP技术"><a href="#VoIP技术" class="headerlink" title="VoIP技术"></a>VoIP技术</h2><p>在这之前，让我们先了解有关VoIP的几个要点。</p>
<ul>
<li><p>VOIP是一种技术，可以让你在互联网上提供语音和多媒体（视频，图片）内容。它随时进行通信，随着互联网的普及，特别是移动互联网的发展，VOIP成为最便捷的方式之一。</p>
</li>
<li><p>VOIP的一些优点包括：</p>
<ul>
<li>低成本</li>
<li>可移植性</li>
<li>不需额外的电缆</li>
<li>灵活性</li>
<li>可视频会议</li>
</ul>
</li>
<li>对于VOIP电话，所有需要的是一台电脑/笔记本电脑/手机与互联网连接。下图描述了一个VoIP呼叫是如何发生的。<br><img src="http://img.blog.csdn.net/20160906170301394" alt="VoIP.JPG"><br>有了这么多的基础，让我们回到SIP。</li>
</ul>
<h2 id="SIP-–-概要"><a href="#SIP-–-概要" class="headerlink" title="SIP – 概要"></a>SIP – 概要</h2><p>对于SIP，以下几点需要注意：</p>
<ul>
<li><p>SIP用于创建，修改和终止多媒体会话因特网协议上的一个信令协议。会话无非是两个端点之间的一个简单的调用。一个终端可以是智能电话，平板计算机，或能够接收和发送多媒体内容在因特网上的任何设备。</p>
</li>
<li><p>SIP是由IETF（因特网工程任务组）标准中定义的应用层协议。它是在RFC3261中定义的。</p>
</li>
<li><p>SIP混有两种广泛使用的互联网协议：HTTP（Web浏览）和SMTP（电子邮件）。从HTTP，SIP借用了客户端 - 服务器体系结构以及使用URL和URI。从SMTP，它借用了文本编码方案和标题样式。</p>
</li>
<li><p>SIP采用SDP（会话描述协议）描述一个会话和RTP（实时传输协议）的用于提供语音和IP视频网络。</p>
</li>
<li><p>SIP可以用于两方（单播）或多方（多播）会话。</p>
</li>
<li><p>其他的SIP应用包括文件传输，即时通讯，视频会议，在线游戏和流媒体分发。</p>
</li>
</ul>
<h2 id="SIP是否适合？"><a href="#SIP是否适合？" class="headerlink" title="SIP是否适合？"></a>SIP是否适合？</h2><p>SIP是一个简单的网络信令协议与一个或多个参与者创建和终止会话。 SIP协议被设计为独立于基础传输协议，所以SIP应用程序可在TCP，UDP或其他较低层网络协议运行。</p>
<p>下图分层描述了适合于SIP层的通用方案：<br><img src="http://img.blog.csdn.net/20160906170245284" alt="SIP Layers.JPG"><br>通常情况下，将SIP协议用于互联网电话和多媒体分发两种或更多端点之间。例如，一个人就可以开始使用SIP电话呼叫其他人，或者有人可能会发起与许多与会者的电话会议。</p>
<p>SIP协议被设计成非常简单的，使用一组有限的命令。它也是基于文本的，因此任何人可以读取SIP会话的端点之间传递的SIP消息。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;会话发起协议（SIP-Session Initiation Protocol ）是在VoIP技术中最常用的协议之一。它是一种应用层协议，它与其它应用层协议一起工作，以通过互联网控制多媒体通信会话。&lt;/p&gt;
&lt;h2 id=&quot;VoIP技术&quot;&gt;&lt;a href=&quot;#VoIP技术&quot; 
    
    </summary>
    
    
      <category term="-SIP -VOIP" scheme="http://firstspark.github.io/tags/SIP-VOIP/"/>
    
  </entry>
  
  <entry>
    <title>SIP消息</title>
    <link href="http://firstspark.github.io/2016/09/05/sip-message/"/>
    <id>http://firstspark.github.io/2016/09/05/sip-message/</id>
    <published>2016-09-05T14:30:54.000Z</published>
    <updated>2016-09-06T09:15:20.928Z</updated>
    
    <content type="html"><![CDATA[<p>SIP消息有两种类型：请求和响应。</p>
<ul>
<li><p>一个请求的打开行包含定义，其中该请求是要被发送的方法，它定义请求，以及请求URI。</p>
</li>
<li><p>同样响应的打开行包含一个响应代码。1</p>
</li>
</ul>
<h2 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h2><p>SIP请求是用于建立通信的代码。为了补充它们，SIP响应其通常指示请求是成功还是失败。</p>
<p>有一些命令称作方法，使SIP消息可行。</p>
<ul>
<li><p>METHODS 可被视为SIP请求，因为它们要求将要采取的另一个用户代理或服务器的特定动作。</p>
</li>
<li><p>METHODS 被区分为两种类型：</p>
<ul>
<li>核心方法</li>
<li>扩展方法</li>
</ul>
</li>
</ul>
<h2 id="核心方法-Core-Methods"><a href="#核心方法-Core-Methods" class="headerlink" title="核心方法(Core Methods)"></a>核心方法(Core Methods)</h2><p>有六个核心的方法如以下所讨论。</p>
<h3 id="INVITE"><a href="#INVITE" class="headerlink" title="INVITE"></a>INVITE</h3><p>INVITE被用于发起会话使用用户代理。换言之，一个INVITE方法用于建立用户代理之间的媒体会话。</p>
<p>  <img src="http://img.blog.csdn.net/20160905230316189" alt="这里写图片描述"></p>
<ul>
<li><p>INVITE可以包含在邮件正文中主叫者的媒体信息。</p>
</li>
<li><p>会话被认为是如果INVITE已经获得了成功响应（2xx）上建立或ACK已发送。</p>
</li>
<li><p>一个成功的INVITE请求建立这一直持续到BYE发送到终止会话的两个用户代理之间的对话。</p>
</li>
<li><p>一个发送的INVITE内已建立的对话被称为一个re-INVITE请求。</p>
</li>
<li><p>re-INVITE请求用于改变在会话特性或刷新一个对话的状态。</p>
</li>
</ul>
<h3 id="INVITE实例"><a href="#INVITE实例" class="headerlink" title="INVITE实例"></a>INVITE实例</h3><p>下面的代码演示了INVITE如何被使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">INVITE sips:Bob@vvsip.com SIP/2.0</div><div class="line">Via: SIP/2.0/TLS client.vvsip.com:5061; branch = z9hG4bK74bf9</div><div class="line">Max-Forwards: 70</div><div class="line">From: Alice &lt;sips:Alice@vvsip.com&gt; ;tag = 1234567</div><div class="line">To: Bob &lt;sips:Bob@vvsip.com&gt;</div><div class="line">Call-ID: 12345601@vvsip.com</div><div class="line">CSeq: 1 INVITE</div><div class="line">Contact: &lt;sips:Alice@client.vvsip.com&gt;</div><div class="line">Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, REFER, NOTIFY</div><div class="line">Supported: replaces</div><div class="line">Content-Type: application/sdp</div><div class="line">Content-Length: ...</div><div class="line">v = 0</div><div class="line">o = Alice 2890844526 2890844526 IN IP4 client.vvsip.com</div><div class="line">s = Session SDP</div><div class="line">c = IN IP4 client.vvsip.com</div><div class="line">t = 3034423619 0</div><div class="line">m = audio 49170 RTP/AVP 0</div><div class="line">a = rtpmap:0 PCMU/8000</div></pre></td></tr></table></figure>
<h3 id="BYE"><a href="#BYE" class="headerlink" title="BYE"></a>BYE</h3><p>BYE用于终止已建立的会话的方法。这是可以通过主叫方或被叫方结束会话被发送SIP请求。</p>
<ul>
<li>它不能由代理服务器发送。</li>
<li>BYE请求通常路线端到端，绕过代理服务器。</li>
<li>BYE不能被发送到一个等待INVITE或未确定会话。</li>
</ul>
<h3 id="REGISTER"><a href="#REGISTER" class="headerlink" title="REGISTER"></a>REGISTER</h3><p>REGISTER请求执行的用户代理的注册。这个请求是由用户代理发送到注册服务器。</p>
<ul>
<li><p>REGISTER请求可以被转发或代理，直到它到达指定域的权威注册机构。</p>
</li>
<li><p>它所携带的AOR（记录地址）在为正在注册的用户的头。</p>
</li>
<li><p>REGISTER请求中包含的时间段（3600秒）。</p>
</li>
<li><p>一个用户代理可以代表其他用户发送代理注册请求。这就是所谓的第三方注册。在这里，从标签中包含方提交的注册代表确定To头部分的URI。</p>
</li>
</ul>
<h3 id="CANCEL"><a href="#CANCEL" class="headerlink" title="CANCEL"></a>CANCEL</h3><p>CANCEL用于终止未建立会话。用户代理使用此请求取消更早启动暂停呼叫的尝试。</p>
<ul>
<li><p>它可以通过一个用户代理或代理服务器来发送。</p>
</li>
<li><p>CANCEL是一个逐跳转发请求，也就是说，它通过用户代理之间的元件和接收由下一状态元素所产生的反应。</p>
</li>
</ul>
<p><img src="http://img.blog.csdn.net/20160905230440197" alt="Hop By Hop.JPG"> </p>
<h3 id="ACK"><a href="#ACK" class="headerlink" title="ACK"></a>ACK</h3><p>ACK用于确认最后的响应的INVITE方法。ACK总是在INVITE的方向。 ACK可能包含的SDP主体（媒体特性），如果它不在INVITE可用。</p>
<p><img src="http://img.blog.csdn.net/20160905230505598" alt="SDP AckSDP.JPG"><br><img src="http://img.blog.csdn.net/20160905230515660" alt="Acknowledgement.JPG"></p>
<ul>
<li><p>ACK可能不被用于修改一个已经发送的初始INVITE的媒体描述。</p>
</li>
<li><p>有状态代理接收ACK必须确定是否将ACK应下游转发到另一个代理或用户代理。</p>
</li>
<li><p>对于2xx应答，ACK是端到端的，但对于所有其他最终响应，它可以在逐跳转发基础上参与状态代理时。</p>
</li>
</ul>
<h3 id="OPTION"><a href="#OPTION" class="headerlink" title="OPTION"></a>OPTION</h3><p>OPTIONS方法用于查询的用户代理或围绕其功能的代理服务器，并发现其当前的可用性。于请求的响应列出了用户代理或服务器的功能。代理从未产生OPTIONS请求。</p>
<h2 id="扩展方法-Extension-Methods"><a href="#扩展方法-Extension-Methods" class="headerlink" title="扩展方法(Extension Methods)"></a>扩展方法(Extension Methods)</h2><h3 id="Subscribe"><a href="#Subscribe" class="headerlink" title="Subscribe"></a>Subscribe</h3><p>Subscribe所使用的用户代理商建立了订阅获取通知的有关特定事件的目的。</p>
<ul>
<li><p>它有一个时间周期，在Expires头字段，指示存在一个订阅的所需的持续时间。</p>
</li>
<li><p>在指定的时间段过后，订阅将自动终止。</p>
</li>
<li><p>成功订阅建立用户代理之间的对话。</p>
</li>
<li><p>订阅可以通过发送到期时间之前对话框中的另一个订阅刷新。</p>
</li>
<li><p>服务器接受订阅返回一个200 OK。</p>
</li>
<li><p>用户可以通过发送另一个使用订阅方法退订过期值为0（零）。</p>
</li>
</ul>
<p><img src="http://img.blog.csdn.net/20160905230542645" alt="Example Subscribe.JPG"> </p>
<h3 id="NOTIFY"><a href="#NOTIFY" class="headerlink" title="NOTIFY"></a>NOTIFY</h3><p>NOTIFY是用来由用户代理传达的特定事件的发生。NOTIFY总是在对话中发送当用户与通知之间存在订阅。</p>
<ul>
<li><p>200 OK响应被接收为每个NOTIFY以指示它已收到。</p>
</li>
<li><p>NOTIFY请求包含指示，指示订阅的当前状态的包和订阅的状态报头字段的Event报头字段。</p>
</li>
<li><p>NOTIFY总是在订阅开始和订阅终止发送。</p>
</li>
</ul>
<h3 id="PUBLISH"><a href="#PUBLISH" class="headerlink" title="PUBLISH"></a>PUBLISH</h3><p>PUBLISH用于由用户代理发送的事件的状态信息，以已知作为一个事件状态合成器的服务器。</p>
<p><img src="http://img.blog.csdn.net/20160905230608318" alt="Publish.JPG"></p>
<ul>
<li><p>Publish当有事件信息的多种来源主要是有用的。</p>
</li>
<li><p>PUBLISH请求类似于一个NOTIFY，不同之处在于它不是在对话框发送。</p>
</li>
<li><p>一个PUBLISH请求必须包含一个Expires头字段和Min-Expires头字段域。</p>
</li>
</ul>
<h3 id="REFER"><a href="#REFER" class="headerlink" title="REFER"></a>REFER</h3><p>REFER用于由一个用户代理来指另一个用户代理访问URI的对话框。</p>
<ul>
<li><p>REFER必须包含一个Refer-To头。这是参考一个强制性的头。</p>
</li>
<li><p>REFER可以在内部或在对话外发送。</p>
</li>
<li><p>202 Accepted 将引发REFER请求这表明其他用户代理已经接受了参考。</p>
</li>
</ul>
<h3 id="INFO"><a href="#INFO" class="headerlink" title="INFO"></a>INFO</h3><p>INFO所使用的用户代理发送呼叫信令信息，与它建立了一个媒体会话其他用户代理。这是一个终端到终端的请求，并且从不生成由代理。代理会一直转发信息请求。</p>
<h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><p>UPDATE用于修改会话的状态不改变对话的状态。更新用于如果会话没有建立，并且用户想要改变编解码器。</p>
<p><img src="http://img.blog.csdn.net/20160905230631963" alt="Update.JPG"><br>如果会话建立后，再邀请来改变/更新会话。</p>
<h3 id="PRACK"><a href="#PRACK" class="headerlink" title="PRACK"></a>PRACK</h3><p>PRACK用于确认收到临时响应（1XX）可靠传输。</p>
<ul>
<li><p>PRACK通过一个用户代理客户端时产生的临时的响应已经接收到含有RSEQ可靠序列号和一个 supported:100rel 头。</p>
</li>
<li><p>PRACK包含架头（RSEQ+ Cseq）值。</p>
</li>
<li><p>PRACK可能包含邮件正文;它可以被用于提供/应答交换。</p>
</li>
</ul>
<h3 id="MESSAGE"><a href="#MESSAGE" class="headerlink" title="MESSAGE"></a>MESSAGE</h3><p>它是用来发送即时消息或使用SIP IM。一个IM通常由短信息交换实时由从事文本会话参与者。</p>
<p><img src="http://img.blog.csdn.net/20160905230646151" alt="Message.JPG"></p>
<ul>
<li><p>消息可以在对话中或在对话外发送。</p>
</li>
<li><p>消息的内容在邮件正文中携带的MIME附件。</p>
</li>
<li><p>200 OK响应被正常接收，以指示该消息已被传送在它的目的地。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SIP消息有两种类型：请求和响应。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一个请求的打开行包含定义，其中该请求是要被发送的方法，它定义请求，以及请求URI。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同样响应的打开行包含一个响应代码。1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;请
    
    </summary>
    
    
      <category term="-SIP -VOIP" scheme="http://firstspark.github.io/tags/SIP-VOIP/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github快速搭建个人博客</title>
    <link href="http://firstspark.github.io/2016/09/05/hello-world/"/>
    <id>http://firstspark.github.io/2016/09/05/hello-world/</id>
    <published>2016-09-05T14:29:24.854Z</published>
    <updated>2016-09-05T14:29:24.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="1-注册github帐号"><a href="#1-注册github帐号" class="headerlink" title="1.注册github帐号"></a>1.注册github帐号</h3><p>拥有github网站帐号后，新建一个版本库，拥有了一个版本库链接，后面会用到，并启用GitHub Page，添加自己的域名（二级域名也可以）</p>
<h3 id="2-在本地安装hexo环境"><a href="#2-在本地安装hexo环境" class="headerlink" title="2.在本地安装hexo环境"></a>2.在本地安装hexo环境</h3><p>a.安装git，起初用的cygwin自带的git命令，为自己挖了坑（搭建环境过程一切顺利，当hexo deploy 提交到github时，到输入username就卡住了，死活输入不进去，后重新下载STL版的git后，使用GIT bash解决了问题）<br>b.安装node.js ，官网下载安装即可，安装后可获得node 和 npm 命令<br>c.安装hexo ，该过程在git bash命令行中安装，使用命令：$ cnpm install -g hexo-cli  与 $ cnpm install hexo –save .</p>
<h3 id="3-本地运行hexo"><a href="#3-本地运行hexo" class="headerlink" title="3.本地运行hexo"></a>3.本地运行hexo</h3><p>初始化：$ hexo init [目录]，注意：如果不加目录就会初始化到当前目录，所以初始化前要先cd your-hexo-site;安装生成器: cnpm install；本地启动服务：$ hexo s -g ，之后打开浏览器，输入localhost:4000,就可以在本地看到你的个人博客了；</p>
<h3 id="4-本地配置"><a href="#4-本地配置" class="headerlink" title="4.本地配置"></a>4.本地配置</h3><p>修改blog/_config.yml文件，进行配置，主要配置项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">url: http://xxxxyyyy.github.io</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://github.com/xxxxyyyy/xxxxyyyy.com.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<h3 id="5-发布博客"><a href="#5-发布博客" class="headerlink" title="5.发布博客"></a>5.发布博客</h3><p>$ hexo d -g ,会提示输入github的用户名和密码，出现本次搭建博客的最大坑，username不能输入，使用git bash即可解决。<br>至此第一版本就更新到你的github版本库里了。</p>
<h2 id="绑定独立的二级域名"><a href="#绑定独立的二级域名" class="headerlink" title="绑定独立的二级域名"></a>绑定独立的二级域名</h2><p>1.在github版本库setting里配置github page,（注意：版本库branches选择master），配置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Source ： master branch</div><div class="line">Custom domain：blog.vvsip.com</div></pre></td></tr></table></figure></p>
<p>2.域名管理配置，设置DNS的解析，配置二级域名blog，类型CNAME，记录值xxxxyyyy.github.com.</p>
<p>3.这样配置后每次deploy后github上的CNAME会被清空，需要重新配置实在不便。解决方法：从github仓库Download ZIP，解压，找到CNAME文件，修改成需设置的域名，如果已配置域名则文件不需修改，然后放进Hexo\source目录下，提交上去，就OK了。</p>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>网上有很多hexo的主题，最终选择了 NexT.Pisces，感觉还不错，较清新，而且适合国内使用习惯。<br>1.下载：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> your-hexo-site</div><div class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure></p>
<p>2.配置：<br>  修改主配置文件：theme: next  ；修改主题配置文件：scheme: Pisces<br>  其他配置：修改菜单，左侧栏，头像；增加多说评论；增加阅读次数（LeanCloud)</p>
<p>3.优化<br>  a.更换google字体库<br>  修改主题配置文件：host: //fonts.useso.com</p>
<h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><p>文章是用markdown格式的，可用markdownpad 软件，选择use free，分左右对比，书写较为方便；每次写完文章后运行$ hexo d -g进行发布。<br>基本语法:</p>
<p>1.在一段文本前加上 # 符号，即可使其成为标题。Markdown 共支持六级标题，标题级数与 # 的个数一一对应。</p>
<p>2.在一段文本前加上 > 符号，即可将其引用。</p>
<p>3.文字两端分别插入一个星号使其 * 倾斜 *，插入两个星号使其** 加粗 **，插入 ` 符号使其生成行内代码块。</p>
<p>4.用 [ 文字](链接) 的格式为中括号内的文字添加一段链接。插入图片时，在前者的开头加上 ! 即可，即 ![ 可选文字](图片链接)。</p>
<p>5.Markdown 支持无序列表和有序列表，你可以使用 * 作为列表标记生成无序列表，或是用数字加英语句号的组合 1. 来生成有序列表。</p>
<p>6.空白行中输入 * * * 来生成分割线。</p>
<h2 id="多台电脑同步"><a href="#多台电脑同步" class="headerlink" title="多台电脑同步"></a>多台电脑同步</h2><p>1.新开一个版本库，存放src:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> init</div><div class="line"><span class="variable">$git</span> remote add origin &lt;server&gt;</div><div class="line"><span class="variable">$git</span> add .  <span class="comment">#添加blog目录下所有文件，注意有个`.`（`.gitignore`声明过的文件不包含在内)</span></div><div class="line"><span class="variable">$git</span> commit -m <span class="string">"first commit"</span> <span class="comment">#添加更新说明</span></div><div class="line"><span class="variable">$git</span> push -u origin master <span class="comment">#推送更新到云端服务器</span></div><div class="line">(git rm -r --cached .)</div></pre></td></tr></table></figure></p>
<p>2.备份_config.yml文件，保密考虑，单独处理<br>3.另台机器(比如MAC)处理方式：</p>
<pre><code>$git init
$git remote add origin &lt;server&gt; #将本地文件和云端仓库映射起来。这步不可以跳过
$git fetch --all
$git reset --hard origin/master
------
$ cnpm install -g hexo-cli  
$ cnpm install hexo --save
$cnpm install
</code></pre><p>4.之后，两台机器使用是先进行src版本库的同步(git pull origin master)，然后编辑，然后进行hexo d -g. 发布后再将编辑的src版本库同步服务器（$git add . $git commit -m “xxxx” $git push -u origin master）</p>
<p>参考：<br><a href="http://blog.csdn.net/jzooo/article/details/46781805" target="_blank" rel="external">http://blog.csdn.net/jzooo/article/details/46781805</a><br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h2&gt;&lt;h3 id=&quot;1-注册github帐号&quot;&gt;&lt;a href=&quot;#1-注册github帐号&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
    
      <category term="github" scheme="http://firstspark.github.io/tags/github/"/>
    
      <category term="hexo" scheme="http://firstspark.github.io/tags/hexo/"/>
    
      <category term="next" scheme="http://firstspark.github.io/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>homebrew工具：MAC上的apt-get、yum神器</title>
    <link href="http://firstspark.github.io/2016/08/29/homebrew-mac/"/>
    <id>http://firstspark.github.io/2016/08/29/homebrew-mac/</id>
    <published>2016-08-29T15:21:03.000Z</published>
    <updated>2016-09-05T14:29:24.901Z</updated>
    
    <content type="html"><![CDATA[<p>Homebrew官网：<a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="external">http://brew.sh/index_zh-cn.html</a><br>Linux下的软件包管理主流的两大工具是：RedHat的yum，Ubuntu的apt-get .同样的今天介绍的homebrew就是类似的工具，是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Homebrew的安装非常简单，终端下输入下面的命令，中间需要输入密码之类的验证。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>常用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">搜索软件：brew search 软件名，如brew search wget</div><div class="line">安装软件：brew install 软件名，如brew install wget</div><div class="line">卸载软件：brew remove 软件名，如brew remove wget</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Homebrew官网：&lt;a href=&quot;http://brew.sh/index_zh-cn.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://brew.sh/index_zh-cn.html&lt;/a&gt;&lt;br&gt;Linux下的软件包管理主流
    
    </summary>
    
    
      <category term="工具" scheme="http://firstspark.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
