<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>技术博客</title>
  <subtitle>记录点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://firstspark.github.io/"/>
  <updated>2016-09-06T09:15:22.798Z</updated>
  <id>http://firstspark.github.io/</id>
  
  <author>
    <name>VVSIP</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sip_introduction</title>
    <link href="http://firstspark.github.io/2016/09/06/sip-introduction/"/>
    <id>http://firstspark.github.io/2016/09/06/sip-introduction/</id>
    <published>2016-09-06T09:13:53.000Z</published>
    <updated>2016-09-06T09:15:22.798Z</updated>
    
    <content type="html"><![CDATA[<p>会话发起协议（SIP-Session Initiation Protocol ）是在VoIP技术中最常用的协议之一。它是一种应用层协议，它与其它应用层协议一起工作，以通过互联网控制多媒体通信会话。</p>
<h2 id="VoIP技术"><a href="#VoIP技术" class="headerlink" title="VoIP技术"></a>VoIP技术</h2><p>在这之前，让我们先了解有关VoIP的几个要点。</p>
<ul>
<li><p>VOIP是一种技术，可以让你在互联网上提供语音和多媒体（视频，图片）内容。它随时进行通信，随着互联网的普及，特别是移动互联网的发展，VOIP成为最便捷的方式之一。</p>
</li>
<li><p>VOIP的一些优点包括：</p>
<ul>
<li>低成本</li>
<li>可移植性</li>
<li>不需额外的电缆</li>
<li>灵活性</li>
<li>可视频会议</li>
</ul>
</li>
<li>对于VOIP电话，所有需要的是一台电脑/笔记本电脑/手机与互联网连接。下图描述了一个VoIP呼叫是如何发生的。</li>
</ul>
<p><img src="http://img.blog.csdn.net/20160906170301394" alt="VoIP.JPG"><br>有了这么多的基础，让我们回到SIP。</p>
<h2 id="SIP-–-概要"><a href="#SIP-–-概要" class="headerlink" title="SIP – 概要"></a>SIP – 概要</h2><p>对于SIP，以下几点需要注意：</p>
<ul>
<li><p>SIP用于创建，修改和终止多媒体会话因特网协议上的一个信令协议。会话无非是两个端点之间的一个简单的调用。一个终端可以是智能电话，平板计算机，或能够接收和发送多媒体内容在因特网上的任何设备。</p>
</li>
<li><p>SIP是由IETF（因特网工程任务组）标准中定义的应用层协议。它是在RFC3261中定义的。</p>
</li>
<li><p>SIP混有两种广泛使用的互联网协议：HTTP（Web浏览）和SMTP（电子邮件）。从HTTP，SIP借用了客户端 - 服务器体系结构以及使用URL和URI。从SMTP，它借用了文本编码方案和标题样式。</p>
</li>
<li><p>SIP采用SDP（会话描述协议）描述一个会话和RTP（实时传输协议）的用于提供语音和IP视频网络。</p>
</li>
<li><p>SIP可以用于两方（单播）或多方（多播）会话。</p>
</li>
<li><p>其他的SIP应用包括文件传输，即时通讯，视频会议，在线游戏和流媒体分发。</p>
</li>
</ul>
<h2 id="SIP是否适合？"><a href="#SIP是否适合？" class="headerlink" title="SIP是否适合？"></a>SIP是否适合？</h2><p>SIP是一个简单的网络信令协议与一个或多个参与者创建和终止会话。 SIP协议被设计为独立于基础传输协议，所以SIP应用程序可在TCP，UDP或其他较低层网络协议运行。</p>
<p>下图分层描述了适合于SIP层的通用方案：</p>
<p><img src="http://img.blog.csdn.net/20160906170245284" alt="SIP Layers.JPG"><br>通常情况下，将SIP协议用于互联网电话和多媒体分发两种或更多端点之间。例如，一个人就可以开始使用SIP电话呼叫其他人，或者有人可能会发起与许多与会者的电话会议。</p>
<p>SIP协议被设计成非常简单的，使用一组有限的命令。它也是基于文本的，因此任何人可以读取SIP会话的端点之间传递的SIP消息。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;会话发起协议（SIP-Session Initiation Protocol ）是在VoIP技术中最常用的协议之一。它是一种应用层协议，它与其它应用层协议一起工作，以通过互联网控制多媒体通信会话。&lt;/p&gt;
&lt;h2 id=&quot;VoIP技术&quot;&gt;&lt;a href=&quot;#VoIP技术&quot; 
    
    </summary>
    
    
      <category term="-SIP -VOIP" scheme="http://firstspark.github.io/tags/SIP-VOIP/"/>
    
  </entry>
  
  <entry>
    <title>SIP消息</title>
    <link href="http://firstspark.github.io/2016/09/05/sip-message/"/>
    <id>http://firstspark.github.io/2016/09/05/sip-message/</id>
    <published>2016-09-05T14:30:54.000Z</published>
    <updated>2016-09-06T09:15:20.928Z</updated>
    
    <content type="html"><![CDATA[<p>SIP消息有两种类型：请求和响应。</p>
<ul>
<li><p>一个请求的打开行包含定义，其中该请求是要被发送的方法，它定义请求，以及请求URI。</p>
</li>
<li><p>同样响应的打开行包含一个响应代码。1</p>
</li>
</ul>
<h2 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h2><p>SIP请求是用于建立通信的代码。为了补充它们，SIP响应其通常指示请求是成功还是失败。</p>
<p>有一些命令称作方法，使SIP消息可行。</p>
<ul>
<li><p>METHODS 可被视为SIP请求，因为它们要求将要采取的另一个用户代理或服务器的特定动作。</p>
</li>
<li><p>METHODS 被区分为两种类型：</p>
<ul>
<li>核心方法</li>
<li>扩展方法</li>
</ul>
</li>
</ul>
<h2 id="核心方法-Core-Methods"><a href="#核心方法-Core-Methods" class="headerlink" title="核心方法(Core Methods)"></a>核心方法(Core Methods)</h2><p>有六个核心的方法如以下所讨论。</p>
<h3 id="INVITE"><a href="#INVITE" class="headerlink" title="INVITE"></a>INVITE</h3><p>INVITE被用于发起会话使用用户代理。换言之，一个INVITE方法用于建立用户代理之间的媒体会话。</p>
<p>  <img src="http://img.blog.csdn.net/20160905230316189" alt="这里写图片描述"></p>
<ul>
<li><p>INVITE可以包含在邮件正文中主叫者的媒体信息。</p>
</li>
<li><p>会话被认为是如果INVITE已经获得了成功响应（2xx）上建立或ACK已发送。</p>
</li>
<li><p>一个成功的INVITE请求建立这一直持续到BYE发送到终止会话的两个用户代理之间的对话。</p>
</li>
<li><p>一个发送的INVITE内已建立的对话被称为一个re-INVITE请求。</p>
</li>
<li><p>re-INVITE请求用于改变在会话特性或刷新一个对话的状态。</p>
</li>
</ul>
<h3 id="INVITE实例"><a href="#INVITE实例" class="headerlink" title="INVITE实例"></a>INVITE实例</h3><p>下面的代码演示了INVITE如何被使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">INVITE sips:Bob@vvsip.com SIP/2.0</div><div class="line">Via: SIP/2.0/TLS client.vvsip.com:5061; branch = z9hG4bK74bf9</div><div class="line">Max-Forwards: 70</div><div class="line">From: Alice &lt;sips:Alice@vvsip.com&gt; ;tag = 1234567</div><div class="line">To: Bob &lt;sips:Bob@vvsip.com&gt;</div><div class="line">Call-ID: 12345601@vvsip.com</div><div class="line">CSeq: 1 INVITE</div><div class="line">Contact: &lt;sips:Alice@client.vvsip.com&gt;</div><div class="line">Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, REFER, NOTIFY</div><div class="line">Supported: replaces</div><div class="line">Content-Type: application/sdp</div><div class="line">Content-Length: ...</div><div class="line">v = 0</div><div class="line">o = Alice 2890844526 2890844526 IN IP4 client.vvsip.com</div><div class="line">s = Session SDP</div><div class="line">c = IN IP4 client.vvsip.com</div><div class="line">t = 3034423619 0</div><div class="line">m = audio 49170 RTP/AVP 0</div><div class="line">a = rtpmap:0 PCMU/8000</div></pre></td></tr></table></figure>
<h3 id="BYE"><a href="#BYE" class="headerlink" title="BYE"></a>BYE</h3><p>BYE用于终止已建立的会话的方法。这是可以通过主叫方或被叫方结束会话被发送SIP请求。</p>
<ul>
<li>它不能由代理服务器发送。</li>
<li>BYE请求通常路线端到端，绕过代理服务器。</li>
<li>BYE不能被发送到一个等待INVITE或未确定会话。</li>
</ul>
<h3 id="REGISTER"><a href="#REGISTER" class="headerlink" title="REGISTER"></a>REGISTER</h3><p>REGISTER请求执行的用户代理的注册。这个请求是由用户代理发送到注册服务器。</p>
<ul>
<li><p>REGISTER请求可以被转发或代理，直到它到达指定域的权威注册机构。</p>
</li>
<li><p>它所携带的AOR（记录地址）在为正在注册的用户的头。</p>
</li>
<li><p>REGISTER请求中包含的时间段（3600秒）。</p>
</li>
<li><p>一个用户代理可以代表其他用户发送代理注册请求。这就是所谓的第三方注册。在这里，从标签中包含方提交的注册代表确定To头部分的URI。</p>
</li>
</ul>
<h3 id="CANCEL"><a href="#CANCEL" class="headerlink" title="CANCEL"></a>CANCEL</h3><p>CANCEL用于终止未建立会话。用户代理使用此请求取消更早启动暂停呼叫的尝试。</p>
<ul>
<li><p>它可以通过一个用户代理或代理服务器来发送。</p>
</li>
<li><p>CANCEL是一个逐跳转发请求，也就是说，它通过用户代理之间的元件和接收由下一状态元素所产生的反应。</p>
</li>
</ul>
<p><img src="http://img.blog.csdn.net/20160905230440197" alt="Hop By Hop.JPG"> </p>
<h3 id="ACK"><a href="#ACK" class="headerlink" title="ACK"></a>ACK</h3><p>ACK用于确认最后的响应的INVITE方法。ACK总是在INVITE的方向。 ACK可能包含的SDP主体（媒体特性），如果它不在INVITE可用。</p>
<p><img src="http://img.blog.csdn.net/20160905230505598" alt="SDP AckSDP.JPG"><br><img src="http://img.blog.csdn.net/20160905230515660" alt="Acknowledgement.JPG"></p>
<ul>
<li><p>ACK可能不被用于修改一个已经发送的初始INVITE的媒体描述。</p>
</li>
<li><p>有状态代理接收ACK必须确定是否将ACK应下游转发到另一个代理或用户代理。</p>
</li>
<li><p>对于2xx应答，ACK是端到端的，但对于所有其他最终响应，它可以在逐跳转发基础上参与状态代理时。</p>
</li>
</ul>
<h3 id="OPTION"><a href="#OPTION" class="headerlink" title="OPTION"></a>OPTION</h3><p>OPTIONS方法用于查询的用户代理或围绕其功能的代理服务器，并发现其当前的可用性。于请求的响应列出了用户代理或服务器的功能。代理从未产生OPTIONS请求。</p>
<h2 id="扩展方法-Extension-Methods"><a href="#扩展方法-Extension-Methods" class="headerlink" title="扩展方法(Extension Methods)"></a>扩展方法(Extension Methods)</h2><h3 id="Subscribe"><a href="#Subscribe" class="headerlink" title="Subscribe"></a>Subscribe</h3><p>Subscribe所使用的用户代理商建立了订阅获取通知的有关特定事件的目的。</p>
<ul>
<li><p>它有一个时间周期，在Expires头字段，指示存在一个订阅的所需的持续时间。</p>
</li>
<li><p>在指定的时间段过后，订阅将自动终止。</p>
</li>
<li><p>成功订阅建立用户代理之间的对话。</p>
</li>
<li><p>订阅可以通过发送到期时间之前对话框中的另一个订阅刷新。</p>
</li>
<li><p>服务器接受订阅返回一个200 OK。</p>
</li>
<li><p>用户可以通过发送另一个使用订阅方法退订过期值为0（零）。</p>
</li>
</ul>
<p><img src="http://img.blog.csdn.net/20160905230542645" alt="Example Subscribe.JPG"> </p>
<h3 id="NOTIFY"><a href="#NOTIFY" class="headerlink" title="NOTIFY"></a>NOTIFY</h3><p>NOTIFY是用来由用户代理传达的特定事件的发生。NOTIFY总是在对话中发送当用户与通知之间存在订阅。</p>
<ul>
<li><p>200 OK响应被接收为每个NOTIFY以指示它已收到。</p>
</li>
<li><p>NOTIFY请求包含指示，指示订阅的当前状态的包和订阅的状态报头字段的Event报头字段。</p>
</li>
<li><p>NOTIFY总是在订阅开始和订阅终止发送。</p>
</li>
</ul>
<h3 id="PUBLISH"><a href="#PUBLISH" class="headerlink" title="PUBLISH"></a>PUBLISH</h3><p>PUBLISH用于由用户代理发送的事件的状态信息，以已知作为一个事件状态合成器的服务器。</p>
<p><img src="http://img.blog.csdn.net/20160905230608318" alt="Publish.JPG"></p>
<ul>
<li><p>Publish当有事件信息的多种来源主要是有用的。</p>
</li>
<li><p>PUBLISH请求类似于一个NOTIFY，不同之处在于它不是在对话框发送。</p>
</li>
<li><p>一个PUBLISH请求必须包含一个Expires头字段和Min-Expires头字段域。</p>
</li>
</ul>
<h3 id="REFER"><a href="#REFER" class="headerlink" title="REFER"></a>REFER</h3><p>REFER用于由一个用户代理来指另一个用户代理访问URI的对话框。</p>
<ul>
<li><p>REFER必须包含一个Refer-To头。这是参考一个强制性的头。</p>
</li>
<li><p>REFER可以在内部或在对话外发送。</p>
</li>
<li><p>202 Accepted 将引发REFER请求这表明其他用户代理已经接受了参考。</p>
</li>
</ul>
<h3 id="INFO"><a href="#INFO" class="headerlink" title="INFO"></a>INFO</h3><p>INFO所使用的用户代理发送呼叫信令信息，与它建立了一个媒体会话其他用户代理。这是一个终端到终端的请求，并且从不生成由代理。代理会一直转发信息请求。</p>
<h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><p>UPDATE用于修改会话的状态不改变对话的状态。更新用于如果会话没有建立，并且用户想要改变编解码器。</p>
<p><img src="http://img.blog.csdn.net/20160905230631963" alt="Update.JPG"><br>如果会话建立后，再邀请来改变/更新会话。</p>
<h3 id="PRACK"><a href="#PRACK" class="headerlink" title="PRACK"></a>PRACK</h3><p>PRACK用于确认收到临时响应（1XX）可靠传输。</p>
<ul>
<li><p>PRACK通过一个用户代理客户端时产生的临时的响应已经接收到含有RSEQ可靠序列号和一个 supported:100rel 头。</p>
</li>
<li><p>PRACK包含架头（RSEQ+ Cseq）值。</p>
</li>
<li><p>PRACK可能包含邮件正文;它可以被用于提供/应答交换。</p>
</li>
</ul>
<h3 id="MESSAGE"><a href="#MESSAGE" class="headerlink" title="MESSAGE"></a>MESSAGE</h3><p>它是用来发送即时消息或使用SIP IM。一个IM通常由短信息交换实时由从事文本会话参与者。</p>
<p><img src="http://img.blog.csdn.net/20160905230646151" alt="Message.JPG"></p>
<ul>
<li><p>消息可以在对话中或在对话外发送。</p>
</li>
<li><p>消息的内容在邮件正文中携带的MIME附件。</p>
</li>
<li><p>200 OK响应被正常接收，以指示该消息已被传送在它的目的地。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SIP消息有两种类型：请求和响应。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一个请求的打开行包含定义，其中该请求是要被发送的方法，它定义请求，以及请求URI。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同样响应的打开行包含一个响应代码。1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;请
    
    </summary>
    
    
      <category term="-SIP -VOIP" scheme="http://firstspark.github.io/tags/SIP-VOIP/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github快速搭建个人博客</title>
    <link href="http://firstspark.github.io/2016/09/05/hello-world/"/>
    <id>http://firstspark.github.io/2016/09/05/hello-world/</id>
    <published>2016-09-05T14:29:24.854Z</published>
    <updated>2016-09-05T14:29:24.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="1-注册github帐号"><a href="#1-注册github帐号" class="headerlink" title="1.注册github帐号"></a>1.注册github帐号</h3><p>拥有github网站帐号后，新建一个版本库，拥有了一个版本库链接，后面会用到，并启用GitHub Page，添加自己的域名（二级域名也可以）</p>
<h3 id="2-在本地安装hexo环境"><a href="#2-在本地安装hexo环境" class="headerlink" title="2.在本地安装hexo环境"></a>2.在本地安装hexo环境</h3><p>a.安装git，起初用的cygwin自带的git命令，为自己挖了坑（搭建环境过程一切顺利，当hexo deploy 提交到github时，到输入username就卡住了，死活输入不进去，后重新下载STL版的git后，使用GIT bash解决了问题）<br>b.安装node.js ，官网下载安装即可，安装后可获得node 和 npm 命令<br>c.安装hexo ，该过程在git bash命令行中安装，使用命令：$ cnpm install -g hexo-cli  与 $ cnpm install hexo –save .</p>
<h3 id="3-本地运行hexo"><a href="#3-本地运行hexo" class="headerlink" title="3.本地运行hexo"></a>3.本地运行hexo</h3><p>初始化：$ hexo init [目录]，注意：如果不加目录就会初始化到当前目录，所以初始化前要先cd your-hexo-site;安装生成器: cnpm install；本地启动服务：$ hexo s -g ，之后打开浏览器，输入localhost:4000,就可以在本地看到你的个人博客了；</p>
<h3 id="4-本地配置"><a href="#4-本地配置" class="headerlink" title="4.本地配置"></a>4.本地配置</h3><p>修改blog/_config.yml文件，进行配置，主要配置项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">url: http://xxxxyyyy.github.io</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://github.com/xxxxyyyy/xxxxyyyy.com.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<h3 id="5-发布博客"><a href="#5-发布博客" class="headerlink" title="5.发布博客"></a>5.发布博客</h3><p>$ hexo d -g ,会提示输入github的用户名和密码，出现本次搭建博客的最大坑，username不能输入，使用git bash即可解决。<br>至此第一版本就更新到你的github版本库里了。</p>
<h2 id="绑定独立的二级域名"><a href="#绑定独立的二级域名" class="headerlink" title="绑定独立的二级域名"></a>绑定独立的二级域名</h2><p>1.在github版本库setting里配置github page,（注意：版本库branches选择master），配置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Source ： master branch</div><div class="line">Custom domain：blog.vvsip.com</div></pre></td></tr></table></figure></p>
<p>2.域名管理配置，设置DNS的解析，配置二级域名blog，类型CNAME，记录值xxxxyyyy.github.com.</p>
<p>3.这样配置后每次deploy后github上的CNAME会被清空，需要重新配置实在不便。解决方法：从github仓库Download ZIP，解压，找到CNAME文件，修改成需设置的域名，如果已配置域名则文件不需修改，然后放进Hexo\source目录下，提交上去，就OK了。</p>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>网上有很多hexo的主题，最终选择了 NexT.Pisces，感觉还不错，较清新，而且适合国内使用习惯。<br>1.下载：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> your-hexo-site</div><div class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure></p>
<p>2.配置：<br>  修改主配置文件：theme: next  ；修改主题配置文件：scheme: Pisces<br>  其他配置：修改菜单，左侧栏，头像；增加多说评论；增加阅读次数（LeanCloud)</p>
<p>3.优化<br>  a.更换google字体库<br>  修改主题配置文件：host: //fonts.useso.com</p>
<h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><p>文章是用markdown格式的，可用markdownpad 软件，选择use free，分左右对比，书写较为方便；每次写完文章后运行$ hexo d -g进行发布。<br>基本语法:</p>
<p>1.在一段文本前加上 # 符号，即可使其成为标题。Markdown 共支持六级标题，标题级数与 # 的个数一一对应。</p>
<p>2.在一段文本前加上 > 符号，即可将其引用。</p>
<p>3.文字两端分别插入一个星号使其 * 倾斜 *，插入两个星号使其** 加粗 **，插入 ` 符号使其生成行内代码块。</p>
<p>4.用 [ 文字](链接) 的格式为中括号内的文字添加一段链接。插入图片时，在前者的开头加上 ! 即可，即 ![ 可选文字](图片链接)。</p>
<p>5.Markdown 支持无序列表和有序列表，你可以使用 * 作为列表标记生成无序列表，或是用数字加英语句号的组合 1. 来生成有序列表。</p>
<p>6.空白行中输入 * * * 来生成分割线。</p>
<h2 id="多台电脑同步"><a href="#多台电脑同步" class="headerlink" title="多台电脑同步"></a>多台电脑同步</h2><p>1.新开一个版本库，存放src:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> init</div><div class="line"><span class="variable">$git</span> remote add origin &lt;server&gt;</div><div class="line"><span class="variable">$git</span> add .  <span class="comment">#添加blog目录下所有文件，注意有个`.`（`.gitignore`声明过的文件不包含在内)</span></div><div class="line"><span class="variable">$git</span> commit -m <span class="string">"first commit"</span> <span class="comment">#添加更新说明</span></div><div class="line"><span class="variable">$git</span> push -u origin master <span class="comment">#推送更新到云端服务器</span></div><div class="line">(git rm -r --cached .)</div></pre></td></tr></table></figure></p>
<p>2.备份_config.yml文件，保密考虑，单独处理<br>3.另台机器(比如MAC)处理方式：</p>
<pre><code>$git init
$git remote add origin &lt;server&gt; #将本地文件和云端仓库映射起来。这步不可以跳过
$git fetch --all
$git reset --hard origin/master
------
$ cnpm install -g hexo-cli  
$ cnpm install hexo --save
$cnpm install
</code></pre><p>4.之后，两台机器使用是先进行src版本库的同步(git pull origin master)，然后编辑，然后进行hexo d -g. 发布后再将编辑的src版本库同步服务器（$git add . $git commit -m “xxxx” $git push -u origin master）</p>
<p>参考：<br><a href="http://blog.csdn.net/jzooo/article/details/46781805" target="_blank" rel="external">http://blog.csdn.net/jzooo/article/details/46781805</a><br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h2&gt;&lt;h3 id=&quot;1-注册github帐号&quot;&gt;&lt;a href=&quot;#1-注册github帐号&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
    
      <category term="github" scheme="http://firstspark.github.io/tags/github/"/>
    
      <category term="hexo" scheme="http://firstspark.github.io/tags/hexo/"/>
    
      <category term="next" scheme="http://firstspark.github.io/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>homebrew工具：MAC上的apt-get、yum神器</title>
    <link href="http://firstspark.github.io/2016/08/29/homebrew-mac/"/>
    <id>http://firstspark.github.io/2016/08/29/homebrew-mac/</id>
    <published>2016-08-29T15:21:03.000Z</published>
    <updated>2016-09-05T14:29:24.901Z</updated>
    
    <content type="html"><![CDATA[<p>Homebrew官网：<a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="external">http://brew.sh/index_zh-cn.html</a><br>Linux下的软件包管理主流的两大工具是：RedHat的yum，Ubuntu的apt-get .同样的今天介绍的homebrew就是类似的工具，是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Homebrew的安装非常简单，终端下输入下面的命令，中间需要输入密码之类的验证。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>常用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">搜索软件：brew search 软件名，如brew search wget</div><div class="line">安装软件：brew install 软件名，如brew install wget</div><div class="line">卸载软件：brew remove 软件名，如brew remove wget</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Homebrew官网：&lt;a href=&quot;http://brew.sh/index_zh-cn.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://brew.sh/index_zh-cn.html&lt;/a&gt;&lt;br&gt;Linux下的软件包管理主流
    
    </summary>
    
    
      <category term="工具" scheme="http://firstspark.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
